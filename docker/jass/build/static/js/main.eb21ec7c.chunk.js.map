{"version":3,"sources":["images/jasstafel.jpg","classes/GameUtils.ts","components/ViewWrapper.tsx","components/DashboardCard.tsx","components/Dashboard.tsx","components/User.tsx","classes/DrawGameBoard.ts","classes/GameMocks.ts","components/GameBoard.tsx","components/CreateGame.tsx","components/App.tsx","index.tsx"],"names":["module","exports","calculatePointsPerTeam","game","rounds","team1","pointsPerTeamPerRound","team","team2","pointsTeam1","pointsTeam2","forEach","round","i","teamToAddPoints","name","points","wiisPoints","console","log","ViewWrapper","props","className","children","DashboardCard","gameTitle","teamOne","pointsTeamOne","teamTwo","pointsTeamTwo","withRouter","useState","isLoading","setIsLoading","error","setError","games","setGames","useEffect","fetch","method","then","response","ok","Error","json","data","catch","message","CircularProgress","Grid","container","spacing","direction","justify","align-items","map","results","item","xs","md","lg","key","id","Card","onClick","history","push","Button","User","DrawGameBoard","canvas","jasstafel","this","Promise","resolve","backgroundImage","Image","src","loadImage","reject","current","context","getContext","onload","drawImage","rest","pointsDrawn","draw","callback","beginPath","lineWidth","strokeStyle","stroke","drawFifthLine","x","y","moveTo","strokeLength","lineTo","drawLine","drawLineCross","ltr","oneT","Math","floor","oneM","oneB","restOne","twoT","twoM","twoB","restTwo","strokeArray","marginTopArray","marginTop","marginMid","marginBot","drawnArray","strokeCount","margin","drawnCount","numOfCross","Number","restTeamOne","toString","restTeamTwo","font","strokeText","renderDefaultBoard","a","pointPerRound","pointsPerRoundTeam1","pointsPerRoundTeam2","drawPoints","drawRest","GameMocks","trump","multiplier","GameBoard","canvasRef","useRef","mockedGame","render","match","params","ref","width","height","useStyles","makeStyles","theme","createStyles","root","filter","createFilterOptions","GAME_NOT_CREATED","NOT_AVAILABLE","BAD_TEAM_NAME","CreateGame","teamNameRegex","RegExp","classes","initialMessage","show","setTeam1","setTeam2","team1ready","setTeam1ready","team2ready","setTeam2ready","team1Message","setTeam1Messages","team2Message","setTeam2Messages","isLoadingTeam1","setIsLoadingTeam1","isLoadingTeam2","setIsLoadingTeam2","setMessage","teams","setTeams","teamError","setTeamError","gameId","setGameId","postGame","headers","body","JSON","stringify","validate","value","regex","noValidationError","validationError","hasError","test","reset","postTeam","selectTeam","setTeam","filterInput","options","filtered","inputValue","title","getOptionLabel","option","renderOption","Fragment","to","Autocomplete","loading","onChange","event","filterOptions","style","freeSolo","renderInput","TextField","helperText","label","variant","disabled","App","AppBar","position","Toolbar","aria-label","path","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.eb21ec7c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/jasstafel.0c30ab70.jpg\";","import {Game} from \"./Game\";\r\nimport {Team} from \"./Game\";\r\nimport {Round} from \"./Game\";\r\n\r\nfunction calculatePointsPerTeam(game: Game) {\r\n\r\n    const rounds: Round[] = game.rounds;\r\n\r\n    const team1: Team = rounds[0].pointsPerTeamPerRound[0].team;\r\n    const team2: Team = rounds[0].pointsPerTeamPerRound[1].team;\r\n\r\n    let pointsTeam1: number = 0;\r\n    let pointsTeam2: number = 0;\r\n\r\n    rounds.forEach((round: Round) => {\r\n\r\n        for (let i = 0; i < 2; i++) {\r\n\r\n            const teamToAddPoints = round.pointsPerTeamPerRound[i].team.name;\r\n\r\n            if (team1.name === teamToAddPoints) {\r\n                pointsTeam1 += round.pointsPerTeamPerRound[i].points;\r\n                pointsTeam1 += round.pointsPerTeamPerRound[i].wiisPoints;\r\n            } else if (team2.name === teamToAddPoints) {\r\n                pointsTeam2 += round.pointsPerTeamPerRound[i].points;\r\n                pointsTeam2 += round.pointsPerTeamPerRound[i].wiisPoints;\r\n            } else {\r\n                console.log(\"Team does not exist: \" + teamToAddPoints)\r\n            }\r\n        }\r\n\r\n\r\n\r\n    });\r\n\r\n    return {\r\n        team1: {\r\n            team: team1,\r\n            points: pointsTeam1\r\n        },\r\n        team2: {\r\n            team: team2,\r\n            points: pointsTeam2\r\n        }\r\n    };\r\n\r\n\r\n}\r\n\r\nexport default calculatePointsPerTeam;\r\n","import React from 'react';\r\n\r\nexport default function ViewWrapper(props: any) {\r\n\r\n    return (<div className=\"viewWrapper\">\r\n        {props.children}\r\n            </div>)\r\n\r\n\r\n}","import React from 'react';\r\n\r\n\r\nexport default function DashboardCard(props: any) {\r\n\r\n    return <div className={\"dashboardCardWrapper\"}>\r\n        <h3>{props.gameTitle}</h3>\r\n        <div className={\"dashboardCardInnerWrapper\"}>\r\n            <div>\r\n                <p>{props.teamOne}</p>\r\n            </div>\r\n            <div>\r\n                <p>{props.pointsTeamOne}</p>\r\n            </div>\r\n        </div>\r\n        <div className={\"dashboardCardInnerWrapper\"}>\r\n            <div>\r\n                <p>{props.teamTwo}</p>\r\n            </div>\r\n            <div>\r\n                <p>{props.pointsTeamTwo}</p>\r\n            </div>\r\n        </div>\r\n    </div>;\r\n}","import React, {useState, useEffect} from 'react';\r\nimport {Grid} from \"@material-ui/core\";\r\nimport {Game} from \"../classes/Game\";\r\nimport calculatePointsPerTeam from \"../classes/GameUtils\";\r\nimport {withRouter} from \"react-router\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\nimport ViewWrapper from \"./ViewWrapper\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport DashboardCard from \"./DashboardCard\";\r\n\r\nfunction Dashboard(props: any) {\r\n\r\n    const [isLoading, setIsLoading] = useState(true);\r\n    const [error, setError] = useState();\r\n    const [games, setGames] = useState([]);\r\n\r\n    useEffect(() => {\r\n        setIsLoading(true);\r\n        fetch('/v1/game', {\r\n            method: 'GET',\r\n        })\r\n            .then((response) => {\r\n                if (response.ok) {\r\n                    response.json().then((data) => {\r\n                        setGames(data);\r\n                        setIsLoading(false);\r\n                    });\r\n                } else {\r\n                    throw new Error(\"Error during game loading, please try again!\");\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                setError({message: error.message, error: error});\r\n                setIsLoading(false);\r\n            });\r\n    }, [setIsLoading, setGames, setError]);\r\n\r\n    const createGame = () => {\r\n        const route = \"/game/create\";\r\n        props.history.push(route);\r\n    };\r\n\r\n    const renderGames = () => {\r\n        return games.map((game: Game) => {\r\n            const results = calculatePointsPerTeam(game);\r\n            return (\r\n                <Grid item xs={12} md={6} lg={3} key={game.id}>\r\n                    <Card onClick={() => {\r\n                        props.history.push(\"/game/\" + game.id);\r\n                    }}>\r\n                        <DashboardCard gameTitle={game.id}\r\n                                   teamOne={results.team1.team.name}\r\n                                   pointsTeamOne={results.team1.points}\r\n                                   teamTwo={results.team2.team.name}\r\n                                   pointsTeamTwo={results.team2.points}\r\n                        />\r\n\r\n\r\n                        {/*<table>*/}\r\n                            {/*<thead>*/}\r\n                            {/*</thead>*/}\r\n                            {/*<tbody>*/}\r\n                            {/*<tr>*/}\r\n                                {/*<th>Game</th>*/}\r\n                                {/*<th>{game.id}</th>*/}\r\n                            {/*</tr>*/}\r\n                            {/*<tr>*/}\r\n                                {/*<td>{results.team1.team.name}</td>*/}\r\n                                {/*<td>{results.team1.points}</td>*/}\r\n                            {/*</tr>*/}\r\n                            {/*<tr>*/}\r\n                                {/*<td>{results.team2.team.name}</td>*/}\r\n                                {/*<td>{results.team2.points}</td>*/}\r\n                            {/*</tr>*/}\r\n                            {/*</tbody>*/}\r\n                        {/*</table>*/}\r\n                    </Card>\r\n                </Grid>\r\n            )\r\n        });\r\n    };\r\n\r\n\r\n    return (\r\n        <ViewWrapper>\r\n            <h1>Dashboard</h1>\r\n\r\n            <h2>Games</h2>\r\n            {isLoading ?\r\n                <CircularProgress/>\r\n                :\r\n                error ?\r\n                    <p>error: {error.message}</p>\r\n                    :\r\n                    <Grid container\r\n                          spacing={10}\r\n                          direction=\"row\"\r\n                          justify=\"center\"\r\n                          align-items=\"center\">\r\n                        {renderGames()}\r\n                        <Grid item xs={12} md={4} lg={2}>\r\n                            <Button onClick={createGame}>+ Game</Button>\r\n                        </Grid>\r\n                    </Grid>\r\n            }\r\n        </ViewWrapper>\r\n    );\r\n}\r\n\r\nexport default withRouter(Dashboard)\r\n","import React from 'react'\r\nimport ViewWrapper from \"./ViewWrapper\";\r\n\r\nfunction User() {\r\n    return <ViewWrapper>\r\n        <h1>Users</h1>\r\n    </ViewWrapper>\r\n}\r\n\r\nexport default User;\r\n","import {Game, Round} from \"./Game\";\r\nimport {RefObject} from \"react\";\r\nimport calculatePointsPerTeam from \"../classes/GameUtils\";\r\nimport {PointsDrawn, Rest} from \"./drawing\";\r\n\r\nclass DrawGameBoard {\r\n\r\n    canvas: RefObject<HTMLCanvasElement>;\r\n    game: Game;\r\n    jasstafel: string;\r\n\r\n    constructor(canvas: RefObject<HTMLCanvasElement>, game: Game, jasstafel: string) {\r\n        this.canvas = canvas;\r\n        this.game = game;\r\n        this.jasstafel = jasstafel;\r\n    }\r\n\r\n    loadImage(): Promise<HTMLImageElement> {\r\n        return new Promise((resolve) => {\r\n            let backgroundImage = new Image(515, 720);\r\n            backgroundImage.src = this.jasstafel;\r\n            resolve(backgroundImage);\r\n        })\r\n    }\r\n\r\n    renderDefaultBoard(): Promise<CanvasRenderingContext2D> {\r\n        return this.loadImage()\r\n            .then((backgroundImage) => {\r\n                return new Promise((resolve, reject) => {\r\n                    if (this.canvas.current) {\r\n                        let context = this.canvas.current.getContext(\"2d\");\r\n                        if (backgroundImage) {\r\n                            backgroundImage.onload = function () {\r\n                                if (context) {\r\n                                    context.drawImage(backgroundImage, 0, 0);\r\n                                    resolve(context);\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                });\r\n            })\r\n    }\r\n\r\n\r\n    drawPoints(pointsTeam1: number,\r\n               pointsTeam2: number,\r\n               rest: Rest,\r\n               context: CanvasRenderingContext2D,\r\n               pointsDrawn: PointsDrawn)\r\n        : {\r\n        team1: number,\r\n        team2: number,\r\n        pointsDrawn: PointsDrawn\r\n    } {\r\n        const strokeLength = 30;\r\n        const strokeWidth = 3;\r\n        const strokeMargin = 6;\r\n\r\n        const marginLeft = 130;\r\n        const marginLeftCrosses = 170;\r\n        const marginCrossLegs = 5;\r\n\r\n        const marginTop = 115;\r\n        const marginMid = marginTop + 140;\r\n        const marginBot = marginMid + 42;\r\n        const marginTeams = 290;\r\n\r\n\r\n        let draw = (callback: () => void) => {\r\n            context.beginPath();\r\n            context.lineWidth = strokeWidth;\r\n            context.strokeStyle = \"white\";\r\n            callback();\r\n            context.stroke();\r\n        };\r\n\r\n        let drawFifthLine = (x: number, y: number) => {\r\n            draw(() => {\r\n                context.moveTo(x - strokeMargin, y + (strokeLength / 2));\r\n                context.lineTo(x + (4 * strokeMargin), y - (strokeLength / 2));\r\n            })\r\n        };\r\n\r\n        let drawLine = (x: number, y: number) => {\r\n            draw(() => {\r\n                context.moveTo(x, y - (strokeLength / 2));\r\n                context.lineTo(x, y + (strokeLength / 2));\r\n            });\r\n        };\r\n\r\n        let drawLineCross = (x: number, y: number, ltr: boolean) => {\r\n            draw(() => {\r\n                if (ltr) {\r\n                    context.moveTo(x, y - (strokeLength / 2));\r\n                    context.lineTo(marginCrossLegs + x, y + (strokeLength / 2));\r\n                } else {\r\n                    context.moveTo(x + marginCrossLegs, y - (strokeLength / 2));\r\n                    context.lineTo(x, y + (strokeLength / 2));\r\n                }\r\n            })\r\n\r\n        };\r\n        pointsTeam1+= rest.team1;\r\n        pointsTeam2+=rest.team2;\r\n\r\n        let oneT = Math.floor(pointsTeam1 / 100);\r\n        let oneM = Math.floor((pointsTeam1 % 100) / 50);\r\n        let oneB = Math.floor(pointsTeam1 % 100 % 50 / 20);\r\n        let restOne = pointsTeam1 - oneT*100 -oneM*50 -oneB*20;\r\n\r\n        let twoT = Math.floor(pointsTeam2 / 100);\r\n        let twoM = Math.floor((pointsTeam2 % 100) / 50);\r\n        let twoB = Math.floor(pointsTeam2 % 100 % 50 / 20);\r\n        let restTwo = pointsTeam2 - twoT*100 -twoM*50 -twoB*20;\r\n\r\n        let strokeArray = [oneT, oneM, oneB, twoT, twoM, twoB];\r\n        let marginTopArray = [marginTop, marginMid, marginBot, marginTop + marginTeams, marginMid + marginTeams, marginBot + marginTeams];\r\n        let drawnArray = [pointsDrawn.oneT, pointsDrawn.oneM, pointsDrawn.oneB, pointsDrawn.twoT, pointsDrawn.twoM, pointsDrawn.twoB];\r\n\r\n        for(let i = 0; i< 6; i++){\r\n            let strokeCount = strokeArray[i];\r\n            let margin = marginTopArray[i];\r\n            let drawnCount = drawnArray[i];\r\n            while (strokeCount > 0) {\r\n                if (i !== 1 && i !== 4) {\r\n                    let isFifth = (drawnCount + 1) % 5 === 0 && drawnCount !== 0;\r\n                    if (isFifth) {\r\n                        drawFifthLine(marginLeft + (strokeMargin * (drawnCount - 4)), margin);\r\n                    } else {\r\n                        drawLine(marginLeft + (strokeMargin * drawnCount), margin);\r\n                    }\r\n                } else {\r\n                    let numOfCross = Math.floor(drawnCount / 2);\r\n                    let ltr = drawnCount % 2 === 0;\r\n                    drawLineCross(marginLeftCrosses + (numOfCross * (marginCrossLegs + (2 * strokeWidth + strokeMargin))),\r\n                        margin - (numOfCross * (2 * strokeWidth + strokeMargin)),\r\n                        ltr);\r\n                }\r\n                drawnCount++;\r\n                drawnArray[i]++;\r\n                strokeCount--;\r\n            }\r\n            pointsDrawn.oneT = drawnArray[0];\r\n            pointsDrawn.oneM = drawnArray[1];\r\n            pointsDrawn.oneB = drawnArray[2];\r\n            pointsDrawn.twoT = drawnArray[3];\r\n            pointsDrawn.twoM = drawnArray[4];\r\n            pointsDrawn.twoB = drawnArray[5];\r\n        }\r\n        return {team1: Number(restOne), team2: Number(restTwo), pointsDrawn: pointsDrawn}\r\n    }\r\n\r\n    drawRest(rest: Rest,\r\n             context: CanvasRenderingContext2D) {\r\n\r\n        const restTeamOne:string = rest.team1.toString();\r\n        const restTeamTwo:string = rest.team2.toString();\r\n\r\n        context.lineWidth = 2;\r\n        context.strokeStyle = \"white\";\r\n        context.font = \"25px Arial\";\r\n        context.strokeText(restTeamOne, 375,200);\r\n        context.strokeText(restTeamTwo, 375,500);\r\n\r\n\r\n    }\r\n\r\n    render() {\r\n        this.renderDefaultBoard()\r\n            .then(async (context) => {\r\n                const rounds = this.game.rounds;\r\n\r\n                let points = calculatePointsPerTeam(this.game);\r\n\r\n                const team1 = points.team1.team.name;\r\n                const team2 = points.team2.team.name;\r\n\r\n                let rest = {team1: 0, team2: 0};\r\n                let pointsDrawn = {oneT: 0, oneM: 0, oneB: 0, twoT: 0, twoM: 0, twoB: 0};\r\n\r\n                await rounds.forEach((round: Round) => {\r\n                    const pointPerRound = round.pointsPerTeamPerRound;\r\n                    let pointsPerRoundTeam1 = 0;\r\n                    let pointsPerRoundTeam2 = 0;\r\n\r\n                    for (let i = 0; i < 2; i++) {\r\n                        let team = pointPerRound[i].team.name;\r\n                        let points = pointPerRound[i].points;\r\n                        if (team === team1) {\r\n                            pointsPerRoundTeam1 = points;\r\n                        } else if (team === team2) {\r\n                            pointsPerRoundTeam2 = points;\r\n                        }\r\n                    }\r\n                    rest = this.drawPoints(pointsPerRoundTeam1, pointsPerRoundTeam2, rest, context, pointsDrawn);\r\n                });\r\n                this.drawRest(rest, context);\r\n            });\r\n    }\r\n}\r\n\r\nexport default DrawGameBoard;\r\n","import {Game} from \"./Game\";\r\n\r\nconst GameMocks: Game[] = [\r\n    {\r\n        id: \"asdfjewr\",\r\n        rounds: [\r\n            {\r\n                pointsPerTeamPerRound: [\r\n                    {\r\n                        points: 190,\r\n                        wiisPoints: 30,\r\n                        team: {\r\n                            id: 0,\r\n                            name: \"team1\"\r\n                        }\r\n                    }, {\r\n                        points: 57,\r\n                        wiisPoints: 0,\r\n                        team: {\r\n                            id: 1,\r\n                            name: \"team2\"\r\n                        }\r\n                    }\r\n                ],\r\n                trump: {\r\n                    multiplier: 3,\r\n                    name: \"Trumpf\"\r\n                }\r\n            },\r\n            {\r\n                pointsPerTeamPerRound: [\r\n                    {\r\n                        points: 221,\r\n                        wiisPoints: 250,\r\n                        team: {\r\n                            id: 0,\r\n                            name: \"team1\"\r\n                        }\r\n                    }, {\r\n                        points: 57,\r\n                        wiisPoints: 20,\r\n                        team: {\r\n                            id: 1,\r\n                            name: \"team2\"\r\n                        }\r\n                    }\r\n                ],\r\n                trump: {\r\n                    multiplier: 3,\r\n                    name: \"Trumpf\"\r\n                }\r\n            },\r\n            {\r\n                pointsPerTeamPerRound: [\r\n                    {\r\n                        points: 520,\r\n                        wiisPoints: 45,\r\n                        team: {\r\n                            id: 0,\r\n                            name: \"team1\"\r\n                        }\r\n                    }, {\r\n                        points: 57,\r\n                        wiisPoints: 0,\r\n                        team: {\r\n                            id: 1,\r\n                            name: \"team2\"\r\n                        }\r\n                    }\r\n                ],\r\n                trump: {\r\n                    multiplier: 3,\r\n                    name: \"Trumpf\"\r\n                }\r\n            },\r\n            {\r\n                pointsPerTeamPerRound: [\r\n                    {\r\n                        points: 290,\r\n                        wiisPoints: 40,\r\n                        team: {\r\n                            id: 0,\r\n                            name: \"team1\"\r\n                        }\r\n                    }, {\r\n                        points: 0,\r\n                        wiisPoints: 100,\r\n                        team: {\r\n                            id: 1,\r\n                            name: \"team2\"\r\n                        }\r\n                    }\r\n                ],\r\n                trump: {\r\n                    multiplier: 2,\r\n                    name: \"Anderer Trumpf\"\r\n                }\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        id: \"56\",\r\n        rounds: [{\r\n            pointsPerTeamPerRound: [\r\n                {\r\n                    points: 0,\r\n                    wiisPoints: 0,\r\n                    team: {\r\n                        id: 0,\r\n                        name: \"someteamname\"\r\n                    }\r\n                }, {\r\n                    points: 0,\r\n                    wiisPoints: 0,\r\n                    team: {\r\n                        id: 1,\r\n                        name: \"someotherteamname\"\r\n                    }\r\n                }\r\n            ],\r\n            trump: {\r\n                multiplier: 3,\r\n                name: \"Trumpf\"\r\n            }\r\n        },]\r\n    },\r\n    {\r\n        id: \"game2\",\r\n        rounds: [\r\n            {\r\n                pointsPerTeamPerRound: [\r\n                    {\r\n                        points: 100,\r\n                        wiisPoints: 100,\r\n                        team: {\r\n                            id: 0,\r\n                            name: \"someteamname\"\r\n                        }\r\n                    }, {\r\n                        points: 57,\r\n                        wiisPoints: 0,\r\n                        team: {\r\n                            id: 1,\r\n                            name: \"someotherteamname\"\r\n                        }\r\n                    }\r\n                ],\r\n                trump: {\r\n                    multiplier: 3,\r\n                    name: \"Trumpf\"\r\n                }\r\n            },\r\n            {\r\n                pointsPerTeamPerRound: [\r\n                    {\r\n                        points: 257,\r\n                        wiisPoints: 0,\r\n                        team: {\r\n                            id: 3,\r\n                            name: \"someteamname\"\r\n                        }\r\n                    }, {\r\n                        points: 0,\r\n                        wiisPoints: 100,\r\n                        team: {\r\n                            id: 5,\r\n                            name: \"someotherteamname\"\r\n                        }\r\n                    }\r\n                ],\r\n                trump: {\r\n                    multiplier: 2,\r\n                    name: \"Anderer Trumpf\"\r\n                }\r\n            }\r\n        ]\r\n    }\r\n];\r\n\r\nexport default GameMocks;\r\n","import * as React from \"react\";\r\nimport {useEffect, useRef} from \"react\";\r\nimport DrawGameBoard from \"../classes/DrawGameBoard\";\r\nimport {Game} from \"../classes/Game\";\r\nimport GameMocks from \"../classes/GameMocks\";\r\nimport jasstafel from \"../images/jasstafel.jpg\";\r\nimport ViewWrapper from \"./ViewWrapper\";\r\n\r\nfunction GameBoard(props: any) {\r\n\r\n    const canvasRef = useRef<HTMLCanvasElement>(null);\r\n\r\n    const mockedGame: Game = GameMocks[0];\r\n\r\n    useEffect(() => {\r\n        const boardRenderer = new DrawGameBoard(canvasRef, mockedGame, jasstafel);\r\n        boardRenderer.render();\r\n    });\r\n\r\n    return <ViewWrapper>\r\n        <h1>{props.match.params.id}</h1>\r\n        <canvas ref={canvasRef} width={515} height={720}/>\r\n    </ViewWrapper>;\r\n}\r\n\r\nexport default GameBoard;\r\n","import React, {useEffect, useState} from 'react';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\nimport {createStyles, makeStyles, Theme} from '@material-ui/core/styles';\r\nimport Autocomplete, {createFilterOptions} from '@material-ui/lab/Autocomplete';\r\nimport {GameCreation, Team} from \"../classes/Game\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\nimport ViewWrapper from \"./ViewWrapper\";\r\nimport { Redirect } from 'react-router-dom';\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        root: {\r\n            '& .MuiTextField-root': {\r\n                margin: theme.spacing(1),\r\n                width: '25ch',\r\n            },\r\n        },\r\n    }),\r\n);\r\n\r\nconst filter = createFilterOptions<TeamType>();\r\n\r\ninterface TeamType extends Team {\r\n    title?: string;\r\n}\r\n\r\nconst GAME_NOT_CREATED = 'Spiel wurde nicht erstellt, bitte versuchen sie es erneut.';\r\nconst NOT_AVAILABLE = 'Momentant können keine Spiele erstellt werden, bitte versuchen sie es später erneut.';\r\nconst BAD_TEAM_NAME = 'Ein Teamname muss aus Buchstaben und Zahlen bestehen.';\r\n\r\nconst TEAM_FAILURE = 'Team wurde nicht erstellt, bitte versuchen sie es erneut!';\r\n\r\nfunction CreateGame() {\r\n\r\n    const teamNameRegex = RegExp('^[\\\\w\\\\d]{1,20}$');\r\n\r\n    const [isLoading, setIsLoading] = useState<Boolean>(true);\r\n\r\n    const classes = useStyles();\r\n\r\n    const initialMessage: Message = {show: false, message: ''};\r\n\r\n    const [team1, setTeam1] = useState<Team>({} as Team);\r\n    const [team2, setTeam2] = useState<Team>({} as Team);\r\n    const [team1ready, setTeam1ready] = useState<boolean>(false);\r\n    const [team2ready, setTeam2ready] = useState<boolean>(false);\r\n    const [team1Message, setTeam1Messages] = useState<Message>(initialMessage);\r\n    const [team2Message, setTeam2Messages] = useState<Message>(initialMessage);\r\n    const [isLoadingTeam1, setIsLoadingTeam1] = useState(false);\r\n    const [isLoadingTeam2, setIsLoadingTeam2] = useState(false);\r\n\r\n    const [message, setMessage] = useState<Message>(initialMessage);\r\n    const [teams, setTeams] = useState([] as Team[]);\r\n    const [teamError, setTeamError] = useState<Message>({\r\n        show: false,\r\n        message: '',\r\n    });\r\n    const [gameId, setGameId] = useState<number>();\r\n\r\n    useEffect(() => {\r\n        fetch('/api/v1/team', {\r\n            method: 'GET',\r\n        })\r\n            .then((response) => {\r\n                if (response.ok) {\r\n                    response.json().then((data) => {\r\n                        setTeams(data);\r\n                        setTeamError({\r\n                            message: '',\r\n                            show: false,\r\n                        });\r\n                        setIsLoading(false);\r\n                    });\r\n                } else {\r\n                    setIsLoading(false);\r\n                    throw new Error(NOT_AVAILABLE);\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                setTeamError({\r\n                    show: true,\r\n                    message: error.message,\r\n                    error: error\r\n                });\r\n            });\r\n    }, [setTeams, setTeamError, setIsLoading]);\r\n\r\n    const validateName1 = (value: string) => {\r\n        return validate(value,\r\n            teamNameRegex,\r\n            setTeam1Messages,\r\n            () => {\r\n                return {\r\n                    message: '',\r\n                    show: false\r\n                };\r\n            },\r\n            () => {\r\n                return {\r\n                    show: true,\r\n                    message: BAD_TEAM_NAME\r\n                };\r\n            }\r\n        );\r\n    };\r\n\r\n    const validateName2 = (value: string) => {\r\n        return validate(value,\r\n            teamNameRegex,\r\n            setTeam2Messages,\r\n            () => {\r\n                return {\r\n                    ...team2Message,\r\n                    show: false\r\n                };\r\n            },\r\n            () => {\r\n                return {\r\n                    show: true,\r\n                    message: BAD_TEAM_NAME\r\n                };\r\n\r\n            }\r\n        );\r\n    };\r\n\r\n    const submit = () => {\r\n        if (((team1.id || team1.id === 0) && team1.id.toString()) && ((team2.id || team2.id === 0) && team2.id.toString()) && (team1.id !== team2.id)) {\r\n            const game: GameCreation = {\r\n                teams: [\r\n                    team1,\r\n                    team2,\r\n                ]\r\n            };\r\n            postGame(game)\r\n                .then(id => {\r\n                    reset();\r\n                    setGameId(id);\r\n                })\r\n                .catch((error: ErrorEvent) => {\r\n                    reset();\r\n                    setMessage({\r\n                        show: true,\r\n                        message: error.message,\r\n                        error: error,\r\n                    });\r\n                });\r\n        } else {\r\n            setMessage({\r\n                show: true,\r\n                message: GAME_NOT_CREATED,\r\n            });\r\n        }\r\n    };\r\n\r\n    const postGame = async (game: GameCreation): Promise<number> => {\r\n        const response = await fetch('/api/v1/game', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify(game),\r\n        });\r\n        if (response.ok) {\r\n            const data = await response.json();\r\n            return Promise.resolve(data.id);\r\n        } else {\r\n            throw new Error(GAME_NOT_CREATED);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Returns true if no validation error occurred\r\n     * @param value\r\n     * @param regex\r\n     * @param setMessage\r\n     * @param noValidationError\r\n     * @param validationError\r\n     */\r\n    const validate = (value: string, regex: RegExp, setMessage: (message: Message) => void, noValidationError: () => Message, validationError: () => Message): boolean => {\r\n        let hasError = false;\r\n        if (regex.test(value)) {\r\n            setMessage(noValidationError());\r\n        } else {\r\n            setMessage(validationError());\r\n            hasError = true;\r\n        }\r\n        return !hasError;\r\n    };\r\n\r\n    const reset = () => {\r\n        setTeam1({} as Team);\r\n        setTeam2({} as Team);\r\n        setTeam1Messages(initialMessage);\r\n        setTeam2Messages(initialMessage);\r\n        setMessage(initialMessage);\r\n    };\r\n\r\n    const postTeam = async (name: string): Promise<number> => {\r\n        const response = await fetch('/api/v1/team', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify({\r\n                name: name\r\n            }),\r\n        });\r\n        if (response.ok) {\r\n            const data = await response.json();\r\n            return Promise.resolve(data.id);\r\n        } else {\r\n            throw new Error(TEAM_FAILURE);\r\n        }\r\n    };\r\n\r\n    const selectTeam = async (team: TeamType, setTeam: Function) => {\r\n        if ((team.id || team.id === 0) && team.id.toString()) {\r\n            setTeam(team);\r\n        } else {\r\n            const id = await postTeam(team.name);\r\n            if (id) {\r\n                team.id = id;\r\n                setTeam(team);\r\n            } else {\r\n                return Promise.reject('Team nicht erstellt!');\r\n            }\r\n        }\r\n        return Promise.resolve();\r\n    };\r\n\r\n    const onChangeTeam1 = (event: any, team: TeamType | null) => {\r\n        if (team && team.name) {\r\n            setIsLoadingTeam1(true);\r\n            if (validateName1(team.name)) {\r\n                selectTeam(team, setTeam1)\r\n                    .then(() => {\r\n                        setIsLoadingTeam1(false);\r\n                        setTeam1ready(true);\r\n                    })\r\n                    .catch((error: ErrorEvent) => {\r\n                        setMessage({\r\n                            show: true,\r\n                            message: error.message,\r\n                            error: error,\r\n                        });\r\n                    });\r\n            } else {\r\n                setTeam1ready(false);\r\n            }\r\n            return;\r\n        } else {\r\n            setTeam1ready(false);\r\n        }\r\n    };\r\n\r\n    const onChangeTeam2 = (event: any, team: TeamType | null) => {\r\n        if (team && team.name) {\r\n            setIsLoadingTeam2(true);\r\n            if (validateName2(team.name)) {\r\n                selectTeam(team, setTeam2)\r\n                    .then(() => {\r\n                        setIsLoadingTeam2(false);\r\n                        setTeam2ready(true);\r\n                    })\r\n                    .catch((error: ErrorEvent) => {\r\n                        setMessage({\r\n                            show: true,\r\n                            message: error.message,\r\n                            error: error\r\n                        });\r\n                    });\r\n            } else {\r\n                setTeam2ready(false);\r\n            }\r\n            return;\r\n        } else {\r\n            setTeam2ready(false);\r\n        }\r\n    };\r\n\r\n    const filterInput = (options: any, params: any): TeamType[] => {\r\n        const filtered = filter(options, params);\r\n        if (params.inputValue !== '') {\r\n            filtered.push({\r\n                id: params.id,\r\n                name: params.inputValue,\r\n                title: `Add \"${params.inputValue}\"`,\r\n            });\r\n        }\r\n        return filtered;\r\n    };\r\n\r\n    const getOptionLabel = (option: any): string => {\r\n        // e.g value selected with enter, right from the input\r\n        if (typeof option === 'string') {\r\n            return option;\r\n        }\r\n        return option.name;\r\n    };\r\n\r\n    const renderOption = (option: TeamType) => {\r\n        return option.title ? option.title : option.name;\r\n    };\r\n\r\n    return (\r\n        <ViewWrapper>\r\n            <React.Fragment>\r\n                {teamError ?\r\n                    isLoading ?\r\n                        <CircularProgress/>\r\n                        :\r\n                        gameId ?\r\n                            <Redirect to={'/game/' + gameId}/>\r\n                            :\r\n                            <form className={classes.root}>\r\n                                <h1>Create Game</h1>\r\n                                <Autocomplete\r\n                                    value={team1}\r\n                                    loading={isLoadingTeam1}\r\n                                    onChange={onChangeTeam1}\r\n                                    filterOptions={filterInput}\r\n                                    id=\"free-solo-with-text-demo\"\r\n                                    options={teams}\r\n                                    getOptionLabel={getOptionLabel}\r\n                                    renderOption={renderOption}\r\n                                    style={{width: 300}}\r\n                                    freeSolo\r\n                                    renderInput={(params) => (\r\n                                        <TextField error={team1Message.show} helperText={team1Message.message} {...params}\r\n                                                   label=\"Team 1\" variant=\"outlined\"/>\r\n                                    )}\r\n                                />\r\n                                <Autocomplete\r\n                                    value={team2}\r\n                                    loading={isLoadingTeam2}\r\n                                    onChange={onChangeTeam2}\r\n                                    filterOptions={filterInput}\r\n                                    id=\"free-solo-with-text-demo\"\r\n                                    options={teams}\r\n                                    getOptionLabel={getOptionLabel}\r\n                                    renderOption={renderOption}\r\n                                    style={{width: 300}}\r\n                                    freeSolo\r\n                                    renderInput={(params) => (\r\n                                        <TextField error={team2Message.show} helperText={team2Message.message} {...params}\r\n                                                   label=\"Team 2\" variant=\"outlined\"/>\r\n                                    )}\r\n                                />\r\n                                <Button disabled={!team1ready || !team2ready} onClick={submit}>Create</Button>\r\n                                <Button onClick={reset}>Reset</Button>\r\n                                <p>{message.show && message.message}</p>\r\n                            </form>\r\n                    :\r\n                    <p>{NOT_AVAILABLE}</p>\r\n                }\r\n            </React.Fragment>\r\n        </ViewWrapper>\r\n    );\r\n}\r\n\r\nexport default CreateGame","import React from 'react';\r\nimport '../styles/App.css';\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n  Link\r\n} from \"react-router-dom\";\r\nimport Dashboard from './Dashboard';\r\nimport User from './User';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Button from '@material-ui/core/Button';\r\nimport GameBoard from './GameBoard';\r\nimport CreateGame from \"./CreateGame\";\r\n\r\nfunction App() {\r\n  return (\r\n      <Router>\r\n        <div>\r\n          <AppBar position=\"static\">\r\n            <Toolbar>\r\n              <Button aria-label=\"menu\">\r\n                <Link to=\"/\">Dashboard</Link>\r\n              </Button>\r\n              <Button aria-label=\"menu\">\r\n                <Link to=\"/users\">Users</Link>\r\n              </Button>\r\n            </Toolbar>\r\n          </AppBar>\r\n\r\n          {/* A <Switch> looks through its children <Route>s and\r\n            renders the first one that matches the current URL. */}\r\n          <Switch>\r\n            <Route path=\"/users\">\r\n              <User/>\r\n            </Route>\r\n            <Route path=\"/game/create\">\r\n              <CreateGame/>\r\n            </Route>\r\n            <Route path=\"/game/:id\" render={(props) => <GameBoard {...props}/>}\r\n            />\r\n            <Route path=\"/\">\r\n              <Dashboard/>\r\n            </Route>\r\n\r\n          </Switch>\r\n        </div>\r\n      </Router>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './styles/index.css';\r\nimport App from './components/App';\r\n/*import { Server, Response } from 'miragejs';\r\nimport GameMocks from './classes/GameMocks';\r\n\r\nconst timeout = 2000;\r\n\r\nnew Server({\r\n  routes() {\r\n    this.namespace = 'api/v1';\r\n    \r\n    this.get('/team', (schema: any, request: Request) => {\r\n      return new Response(200, {}, [\r\n        {\r\n          id: 0,\r\n          name: 'babos'\r\n        },\r\n        {\r\n          id: 1,\r\n          name: 'brattas'\r\n        },\r\n        {\r\n          id: 2,\r\n          name: 'brudas'\r\n        },\r\n        {\r\n          id: 3,\r\n          name: 'bestis'\r\n        }\r\n      ]);\r\n    }, { timing: timeout });\r\n\r\n    this.post('/team', () => {\r\n      return new Response(201, {}, {id:20});\r\n    }, { timing: timeout });\r\n\r\n    this.get('/game', (schema: any, request: Request) => {\r\n      return new Response(200, {},  GameMocks);\r\n    }, { timing: timeout });\r\n\r\n    this.post('/game', (schema: any, request: Request) => {\r\n      return new Response(201, {}, {\r\n        id: 56\r\n      });\r\n    }, { timing: timeout });\r\n\r\n  }\r\n});*/\r\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}